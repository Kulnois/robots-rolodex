{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","index.js"],"names":["Card","robot","className","alt","src","id","name","email","address","zipcode","CardList","props","robots","map","key","SearchBox","placeholder","handleChange","type","onChange","App","useState","setRobots","searchField","setSearchField","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","users","length","catch","error","message","filteredRobots","filter","toLowerCase","includes","trim","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"uRAIaA,G,KAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,4BACpB,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,OACV,kDAAqBN,EAAMO,QAAQC,YCJ9BC,G,MAAW,SAACC,GAAD,OACpB,yBAAKT,UAAU,aACVS,EAAMC,OAAOC,KAAI,SAAAZ,GAAK,OACnB,kBAAC,EAAD,CAAMa,IAAKb,EAAMI,GAAIJ,MAAOA,UCH3Bc,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIC,KAAK,SACLhB,UAAU,SACVc,YAAaA,EACbG,SAAUF,MCiDHG,G,MApDH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACPT,EADO,KACCU,EADD,OAEwBD,mBAAS,IAFjC,mBAEPE,EAFO,KAEMC,EAFN,OAG0BH,mBAAS,MAHnC,mBAGPI,EAHO,KAGOC,EAHP,KAgBdC,qBAAU,WAVNC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIA,EAAMC,OAAS,EAAIX,EAAUU,GAASN,EAAgB,mCACpEQ,OAAM,SAAAC,GAAK,OAAIT,EAAgB,yEAAD,OAAoES,EAAMC,QAA1E,YASpC,IAEH,IAAMC,EAAiB,WACnB,GAAIzB,EAAOqB,OAAS,EAChB,OAAOrB,EAAO0B,QAAO,SAAArC,GAAK,OACtBA,EAAMK,KAAKiC,cAAcC,SAASjB,EAAYkB,OAAOF,mBAiBjE,OACI,6BACI,8CACA,kBAAC,EAAD,CACIvB,YAAY,gBACZC,aAjCS,SAACyB,GAClBlB,EAAekB,EAAMC,OAAOC,UAgBxBnB,EACO,4BAAKA,GACLb,EAAOqB,OAAS,GAAKI,IAAiBJ,OAAS,EAC/C,kBAAC,EAAD,CAAUrB,OAAQyB,MAClBzB,EAAOqB,OAAS,IAAMR,GAA4C,IAA5BY,IAAiBJ,OACvD,wFAEA,qDCtCnBY,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dce85dad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({ robot }) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"robot\" src={`https://robohash.org/${robot.id}?set=set1&size=200x200`} />\r\n        <h2>{robot.name}</h2>\r\n        <p>{robot.email}</p>\r\n        <p>Número de serie: {robot.address.zipcode}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n    <div className=\"card-list\">\r\n        {props.robots.map(robot => (\r\n            <Card key={robot.id} robot={robot} />\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        type=\"search\" \r\n        className=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={handleChange} />\r\n);","import React, { useState, useEffect }  from 'react';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n    const [robots, setRobots] = useState([]);\r\n    const [searchField, setSearchField] = useState('');    \r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const fetchRobots = () => {        \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => users.length > 0 ? setRobots(users) : setErrorMessage('No se encontraron resultados'))\r\n            .catch(error => setErrorMessage(`Error de conexión, por favor compruebe su conexión a internet --${error.message}--`))\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setSearchField(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchRobots();\r\n    }, []);    \r\n\r\n    const filteredRobots = () => {\r\n        if (robots.length > 0) {\r\n            return robots.filter(robot =>\r\n                robot.name.toLowerCase().includes(searchField.trim().toLowerCase())\r\n            )\r\n        }\r\n    };\r\n\r\n    const renderContent = () => {\r\n        if (errorMessage) {\r\n            return <h3>{errorMessage}</h3>;\r\n        } else if (robots.length > 0 && filteredRobots().length > 0) {\r\n            return <CardList robots={filteredRobots()} />;\r\n        } else if (robots.length > 0 && !errorMessage && filteredRobots().length === 0) {        \r\n            return <h3>Resultado no encontrado pruebe con otro nombre de robot.</h3>;\r\n        } else {\r\n            return <h3>Buscando robots...</h3>;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Robots Rolodex</h1>\r\n            <SearchBox\r\n                placeholder=\"Buscar Robots\"\r\n                handleChange={handleChange}\r\n            />\r\n            {renderContent()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />, document.getElementById('root')\r\n)"],"sourceRoot":""}